import { useForm, useField } from "react-form";
import Editor from "./Editor";
import DatePicker from "react-datepicker";
import moment from "moment";
import { editPost, postPost } from "../helpers/api";
import { useToasts } from "react-toast-notifications";
import Router from "next/router";

function todayToMongoISO() {
  return moment(new Date()).format("YYYY-MM-DD[T00:00:00.000Z]");
}

function TitleField({ title }) {
  const {
    meta: { error, isTouched, isValidating },
    getInputProps,
  } = useField("title", {
    defaultValue: title,
    //   validate: validateAddressStreet
  });

  return (
    <>
      <input type="text" {...getInputProps()} />{" "}
      {isValidating ? (
        <em>Validating...</em>
      ) : isTouched && error ? (
        <em>{error}</em>
      ) : null}
    </>
  );
}

function DateField({ date }) {
  console.log(date)
  const {
    value = [],
    setValue,
    meta: { error, isTouched, isValidating },
    getInputProps,
  } = useField("date", {
    defaultValue: date  || new Date(),
    //   validate: validateAddressStreet
  });

  const handleChange = (date) => {
    setValue(date);
  };

  return (<DatePicker selected={value} onChange={handleChange} />);
}

function SlugField({ slug }) {
  const {
    meta: { error, isTouched, isValidating },
    getInputProps,
  } = useField("slug", {
    defaultValue: slug,
    //   validate: validateAddressStreet
  });

  return (
    <>
      <input type="text" {...getInputProps()} />{" "}
      {isValidating ? (
        <em>Validating...</em>
      ) : isTouched && error ? (
        <em>{error}</em>
      ) : null}
    </>
  );
}

function CreatedAtField({ createdAt }) {
  const {
    meta: { error, isTouched, isValidating },
    getInputProps,
  } = useField("createdAt", {
    defaultValue: createdAt,
    //   validate: validateAddressStreet
  });

  return (
    <>
      <input
        style={{ display: "none" }}
        type="hidden"
        type="text"
        {...getInputProps()}
      />
    </>
  );
}

function TextField({ html }) {
  const {
    setValue,

    meta: { error, isTouched, isValidating },
    getInputProps,
  } = useField("html", {
    defaultValue: html,

    //   validate: validateAddressStreet
  });

  const handleChange = (text) => {
    setValue(text);
  };

  return (
    <>
      <Editor handleChange={handleChange} {...getInputProps()} html={html} />
      {isValidating ? (
        <em>Validating...</em>
      ) : isTouched && error ? (
        <em>{error}</em>
      ) : null}
    </>
  );
}

function CategoryField({ category }) {
  const {
    meta: { error, isTouched, isValidating },
    getInputProps,
  } = useField("category", {
    defaultValue: category,

    //   validate: validateAddressStreet
  });

  return (
    <>
      <input type="text" {...getInputProps()} />{" "}
      {isValidating ? (
        <em>Validating...</em>
      ) : isTouched && error ? (
        <em>{error}</em>
      ) : null}
    </>
  );
}

function Form({ post }) {
  const { addToast } = useToasts();

  async function sendToServer(values, { isEditor, id }) {
    let formattedDate = moment(values.date).format("YYYY-MM-DD");
    values.date = formattedDate;
    values.updatedAt = todayToMongoISO();
    if (!isEditor) {
      const response = await postPost(values);
      console.log(response);
      if (response.message) {
        addToast(response.message, { appearance: "error" });
      } else {
        addToast("New post added successfully", { appearance: "success" });
      }
       // Router.push("/");
    }
    if (isEditor) {
      const response = await editPost(id, values);
    }
  }

  const {
    Form,
    meta: { isSubmitting, canSubmit },
  } = useForm({
    defaultValues: React.useMemo(
      () => ({
        date: new Date()
      }), 
    []),
    onSubmit: async (values, instance) => {
      console.log(values,instance)
      // onSubmit (and everything else in React Form)
      // has async support out-of-the-box
        return sendToServer(values, {
          isEditor: !!post,
          id: (post && post.id) || null,
        });
     //

      console.log("Huzzah!");
    },
    debugForm: true,
  });



  return (
    <Form
      // onSubmit={(values, e, formApi) => {
      //   // console.log(e);
      //   // e.preventDefault();
      //   // return sendToServer(values, {
      //   //   isEditor: !!post,
      //   //   id: (post && post.id) || null,
      //   // });
      // }}
    >
      {" "}
      <div>
        <label>
          Title: <TitleField title={(post && post.title) || ""} />
        </label>
      </div>
      <div>
        <label>
          Slug: <SlugField slug={(post && post.slug) || ""} />
        </label>
      </div>
      <div>
        <label>
          Category: <CategoryField category={(post && post.category) || ""} />
        </label>
      </div>
      <div>
        <label>
          Date: <DateField date={(post && post.date && new Date(post.date)) } />
        </label>
      </div>
      <div>
        <label>
          Text: <TextField html={(post && post.html) || ""} />
        </label>
      </div>
      <CreatedAtField
        createdAt={(post && post.createdAt) || todayToMongoISO()}
      />
      <div>
        <button type="submit" disabled={!canSubmit}>
          Submit
        </button>
      </div>
      <div>
        <em>{isSubmitting ? "Submitting..." : null}</em>
      </div>
      {(formApi) => (
        <form
          onSubmit={(e) => {
            e.stopPropagation()
            e.preventDefault();
            // formApi.submitForm;
          }}
        >
          {this.props.children}
        </form>
      )}
    </Form>
    /* <style jsx>{`
     
      
      `}</style> */
  );
}
export default Form;
